using System.Text;
using System.Security.Cryptography;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Digests;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Encodings;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using System.Security.Cryptography.X509Certificates;

namespace TheProgram
{
	public class RSAwithBouncyCastle
	{
		private static readonly SecureRandom Random = new();

		public static AsymmetricKeyParameter LoadPublicKey(string certificate, bool isFilePath = false)
		{
			var rsa = RSAwithNET.LoadPublicKey(certificate, isFilePath);
			return DotNetUtilities.GetRsaPublicKey(rsa);
		}

		public static AsymmetricCipherKeyPair GenerateKeyPair(int keySizeInBits = 256 * 8)
		{
			var keyParameters = new KeyGenerationParameters(Random, strength: keySizeInBits);
			var keysGenerator = new RsaKeyPairGenerator();
			keysGenerator.Init(keyParameters);
			return keysGenerator.GenerateKeyPair();
		}

		public static string Apply(string source, AsymmetricKeyParameter key, bool toEncrypt = true)
		{
			var engine = new OaepEncoding(
				cipher: new RsaEngine(),
				hash: new Sha1Digest(),
				mgf1Hash: new Sha1Digest(),
				encodingParams: null
			);
			engine.Init(toEncrypt, key);

			var rawSource = toEncrypt
				? Encoding.UTF8.GetBytes(source)        // Treats source as plain text
				: Convert.FromBase64String(source);     // Treats source as cipher text
			var rawBuffer = engine.ProcessBlock(
				inBytes: rawSource,
				inLen: rawSource.Length,
				inOff: 0
			);

			return !toEncrypt
				? Encoding.UTF8.GetString(rawBuffer)    // Returns plain text
				: Convert.ToBase64String(rawBuffer);    // Returns cipher text
		}
	}

	public class RSAwithNET
	{
		public static RSAParameters LoadPublicKey(string certificate, bool isFilePath = false)
		{
			var cert = isFilePath
				? new X509Certificate2(certificate)
				: new X509Certificate2(Convert.FromBase64String(certificate));
			return cert.GetRSAPublicKey()!.ExportParameters(includePrivateParameters: false);
		}

		public static RSAParameters GenerateKeyPair(int keySizeInBits = 256 * 8)
		{
			using var rsa = new RSACryptoServiceProvider(keySizeInBits);
			return rsa.ExportParameters(includePrivateParameters: true);
		}

		public static string Apply(string source, RSAParameters key, bool toEncrypt = true)
		{
			using var rsa = RSA.Create();
			rsa.ImportParameters(key);

			var rawSource = toEncrypt
				? Encoding.UTF8.GetBytes(source)
				: Convert.FromBase64String(source);
			var rawBuffer = toEncrypt
				? rsa.Encrypt(rawSource, RSAEncryptionPadding.OaepSHA1)
				: rsa.Decrypt(rawSource, RSAEncryptionPadding.OaepSHA1);

			return toEncrypt
				? Convert.ToBase64String(rawBuffer)		// Returns cipher
				: Encoding.UTF8.GetString(rawBuffer);	// Returns text
		}
	}

	public class ConvertKey
	{
		public static AsymmetricCipherKeyPair ToBouncyCastleKeys(RSAParameters rsaParams)
		{
			var modulus = new BigInteger(1, rsaParams.Modulus);
			var pubExpo = new BigInteger(1, rsaParams.Exponent);
			var pbParam = new RsaKeyParameters(
				isPrivate: false,
				modulus: modulus,
				exponent: pubExpo
			);

			return rsaParams.D == null
				? new AsymmetricCipherKeyPair(
					publicParameter: pbParam,
					privateParameter: null
				)
				: new AsymmetricCipherKeyPair(
					publicParameter: pbParam,
					privateParameter: new RsaPrivateCrtKeyParameters(
						modulus: modulus,
						publicExponent: pubExpo,
						privateExponent: new BigInteger(1, rsaParams.D),
						new BigInteger(1, rsaParams.P),
						new BigInteger(1, rsaParams.Q),
						new BigInteger(1, rsaParams.DP),
						new BigInteger(1, rsaParams.DQ),
						new BigInteger(1, rsaParams.InverseQ)
					)
				);
		}

		public static RSAParameters ToRSAParameters(AsymmetricCipherKeyPair keys)
		{
			if (keys.Public is not RsaKeyParameters pubKey)
				throw new ArgumentException("Invalid key type. Only RSA keys are supported.");

			var rsaParams = new RSAParameters
			{
				Modulus = pubKey.Modulus.ToByteArrayUnsigned(),
				Exponent = pubKey.Exponent.ToByteArrayUnsigned()
			};

			if (keys.Private is not RsaPrivateCrtKeyParameters privateParams)
				return rsaParams;

			rsaParams.D = privateParams.Exponent.ToByteArrayUnsigned();
			rsaParams.P = privateParams.P.ToByteArrayUnsigned();
			rsaParams.Q = privateParams.Q.ToByteArrayUnsigned();
			rsaParams.DP = privateParams.DP.ToByteArrayUnsigned();
			rsaParams.DQ = privateParams.DQ.ToByteArrayUnsigned();
			rsaParams.InverseQ = privateParams.QInv.ToByteArrayUnsigned();

			return rsaParams;
		}
	}


	public class Demo
	{
		private const int keySize = 256 * 8;
		private static readonly System.Diagnostics.Stopwatch stopwatch = new();
		private static string Elapsed => stopwatch.Elapsed.TotalSeconds.ToString("0.00000");

		public static void Main()
		{
			while (true)
			{
				// Introduction
				Console.WriteLine("RSA Encryption/Decryption Match");
				Console.WriteLine("Featuring .NET and BouncyCastle");
				Console.WriteLine("———————————————————————————————");
				Console.WriteLine();

				// Key Generation, with .NET
				stopwatch.Restart();
				var netKey = RSAwithNET.GenerateKeyPair(keySize);
				stopwatch.Stop();
				Console.WriteLine($"NET — Key Generation : {Elapsed}s");

				// Key Generation, with BouncyCastle
				stopwatch.Restart();
				var bocKey = RSAwithBouncyCastle.GenerateKeyPair(keySize);
				stopwatch.Stop();
				Console.WriteLine($"BOC — Key Generation : {Elapsed}s");

				// Taking Input
				Console.WriteLine();
				Console.Write("Enter the Plain Text : ");
				var input = Console.ReadLine()!;

				// Encryption, with .NET
				stopwatch.Restart();
				var netCipher = RSAwithNET.Apply(
					source: input,
					key: ConvertKey.ToRSAParameters(bocKey)
				);
				stopwatch.Stop();
				Console.WriteLine();
				Console.WriteLine($"NET — Encrypted in   : {Elapsed}s");
				Console.WriteLine($"NET — Encrypted Text : {netCipher}");

				// Encryption, with BouncyCastle
				stopwatch.Restart();
				var bocCipher = RSAwithBouncyCastle.Apply(
					source: input,
					key: ConvertKey.ToBouncyCastleKeys(netKey).Public
				);
				stopwatch.Stop();
				Console.WriteLine();
				Console.WriteLine($"BOC — Encrypted in   : {Elapsed}s");
				Console.WriteLine($"BOC — Encrypted Text : {bocCipher}");

				// Decryption, with .NET
				stopwatch.Restart();
				var netPlain = RSAwithNET.Apply(
					source: netCipher,
					key: ConvertKey.ToRSAParameters(bocKey),
					toEncrypt: false
				);
				stopwatch.Stop();
				Console.WriteLine();
				Console.WriteLine($"NET — Decrypted in   : {Elapsed}s");
				Console.WriteLine($"NET — Decrypted Text : {netPlain}");

				// Decryption, with BouncyCastle
				stopwatch.Restart();
				var bocPlain = RSAwithBouncyCastle.Apply(
					source: netCipher,
					key: ConvertKey.ToBouncyCastleKeys(netKey).Private,
					toEncrypt: false
				);
				stopwatch.Stop();
				Console.WriteLine();
				Console.WriteLine($"BOC — Decrypted in   : {Elapsed}s");
				Console.WriteLine($"BOC — Decrypted Text : {bocPlain}");

				// Wait for Input
				Console.WriteLine();
				Console.WriteLine("Press any key to continue...");
				Console.ReadKey();
				Console.Clear();
			}
		}
	}
}
